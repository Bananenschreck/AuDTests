package frame;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertLinesMatch;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;
import org.junit.jupiter.api.Test;
import lab.HashTable;

public class MyTests {

	/** Tests the .dot file from the PDF */
	@Test
	public void testDotFile() throws IOException {
		HashTable table = new HashTable(11, "division", "linear_probing");
		table.loadFromFile("TestFile2");
		List<String> lines = table.getHashTable();
		List<String> expected = Files.readAllLines(Paths.get("ResultFile2"));
		assertEquals(expected.size(), lines.size());
		assertLinesMatch(expected, lines);
	}

	/** Tests the hash functions against hashes that got generated by a probably correct solution */
	@Test
	public void hashTestDivision() throws IOException {
		HashTable table = new HashTable(11, HashTable.HASH_FUNCTION_DIVISION, "linear_probing");

		List<String> keys = Files.readAllLines(Paths.get("TestFile3"));
		List<String> expected = Files.readAllLines(Paths.get("ResultFile3-div"));
		assertLinesMatch(expected, keys.stream().map(table::hash).map(String::valueOf).collect(Collectors.toList()));
	}

	/** Tests the hash functions against hashes that got generated by a probably correct solution */
	@Test
	public void hashTestFolding() throws IOException {
		HashTable table = new HashTable(11, HashTable.HASH_FUNCTION_FOLDING, "linear_probing");

		List<String> keys = Files.readAllLines(Paths.get("TestFile3"));
		List<String> expected = Files.readAllLines(Paths.get("ResultFile3-fold"));
		assertLinesMatch(expected, keys.stream().map(table::hash).map(String::valueOf).collect(Collectors.toList()));
	}

	/** Tests the hash functions against hashes that got generated by a probably correct solution */
	@Test
	public void hashTestMidSquare() throws IOException {
		HashTable table = new HashTable(11, HashTable.HASH_FUNCTION_MIDSQUARE, "linear_probing");

		List<String> keys = Files.readAllLines(Paths.get("TestFile3"));
		List<String> expected = Files.readAllLines(Paths.get("ResultFile3-midsq"));
		assertLinesMatch(expected, keys.stream().map(table::hash).map(String::valueOf).collect(Collectors.toList()));
	}
}